---准备工作
1.安装homebrew(软件包依赖) 然后去官网查看安装git代码
2.$ git init 把当前目录变成git 可以管理的仓库  
	自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
3.修改提交文件  
  $ git status 
  $ git add
  $ git commit xx -m 'note'

---版本控制
1.查看提交历史记录
   $ git log
   如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
   $ git log --pretty=oneline --abbrev-commit
   7062b1540ef7a040d4bdcd1afb3542d1795e7965 (HEAD -> master) version control
   (16进制的版本号 commit comand)
   --pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
   --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。

2. 我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
   $ git checkout -- file可以丢弃工作区的修改 没有进行git add 的 操作
   $ git reset --hard HEAD^    --hard 直接提交
   reset切换后，push，若是报错
   可以使用 git pull + 远程名+ 分支名操作，使得远程与本地之间保持一致 再进行push
   git无法pull仓库refusing to merge unrelated histories 
   $ git pull origin master ----allow-unrelated-histories
   $ git reflog 查看所有提交记录
   $ git reset --hard xxxxx  恢复到某一版本号 并且提交

   HEAD^就是表示上一个版本； 
   HEAD^^就是表示上上一个版本
   HEAD~100就是往上100个版本；
   git revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留
   git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区
   如果换做执行git reset --hard HEAD~1后 HEAD is now at HEAD~1 

3. git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
   $ git diff HEAD  直接 git diff  可以查看当前更改
   $ git diff 422dc19 -- xxx.txt 直接对比版本号

-- 分支管理
1.我们创建dev分支，然后切换到dev分支：
   $ git checkout -b dev  -b参数表示创建并切换
   $ git branch 命令查看当前分支：
   $ git checkout master 可以切换回master分支

2.我们把dev分支的工作成果合并到master分支上
   $ git merge dev
   $ git merge --no-ff -m "merge with no-ff" dev

3.删除dev分支了
   $ git branch -d dev
   $ git branch -D dev 

4.解决冲突后查看
   $ git log --graph --pretty=oneline --abbrev-commit

5.Bug分支
   可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
   $ git stash
   $ git stash list
   $ git stash apply stash@{0} 指定恢复
   $ git stash pop 恢复现场 恢复的同时把stash内容也删了

-- 操作标签
1.用-a指定标签名，-m指定说明文字：
   $ git tag -a v0.1 -m "version 0.1 released" 3628164
   $ git tag 查看所有tag
   $ git show v0.1

2.推送标签
   $ git push origin --tags
   $ git push origin v1.0

3.删除标签 推送
   $ git tag -d v0.9
   $ git push origin :refs/tags/v0.9

 
-- 忽略特殊文件
   .gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
   最后一步就是把.gitignore也提交到Git
   $ git check-ignore -v App.class

-- 配置别名
   --global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
   $ git config --global alias.st status  
   $ git config --global alias.co checkout
   $ git config --global alias.ci commit
   $ git config --global alias.br branch
   $ git config --global alias.unstage 'reset HEAD'
   $ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
   
   git di 代替git diff  
   $ git config --global diff.tool vimdiff
   $ git config --global difftool.prompt false
   $ git config --global alias.di difftool

   vimdiff 操作
   do - Get changes from other window into the current window.
   dp - Put the changes from current window into the other window.
   ]c - Jump to the next change.
   [c - Jump to the previous change.
   Ctrl W + Ctrl W - Switch to the other split window.
   :diffupdate – diff update 
   :syntax off – syntax off 
   zo – open folded text
   zc – close folded text

   每个仓库的Git配置文件都放在.git/config文件中：
   $ cat .git/config
   当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
   ~ $ cat .gitconfig

--添加远程库
1. 关联远程库 远程库的名字就是origin，这是Git默认的叫法，也可以改成别的
   $ git remote add origin git@github.com:305831462/GitNote.git

2. 把本地库的所有内容推送到远程库上
   我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
   $ git push -u origin master   以后直接可以用git push
   $ git push origin master
   $ git push origin dev 可以推送分支 

3. push 失败的情况
   重新创建公钥
   ssh-keygen -t rsa -C youremail@example.com(你的Github登陆名)

   -t type 指定要创建的密钥类型。可以使用："rsa1"(SSH-1) "rsa"(SSH-2) "dsa"(SSH-2)
   -C comment 提供一个新注释
   接着都是回车，选择默认的目录，默认的密码即可
   接着可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对
   github上面设置秘钥
   title:可以顺便填名字
   key:在Key文本框里粘贴id_rsa.pub文件的内容
   
   测试是否连接成功
   ssh -T git@github.com
   ssh -v git@github.com

4. git config --list
   git remote -v
   重新添加remote
   git remote set-url origin xxxxx

   git remote -h

-------------------------------------------------------------------------------------------------------- 
Ctrl + L 清理终端信息
--SSH登录方式主要分为两种：
1. 用户名密码验证方式
说明：
　　（1） 当客户端发起ssh请求，服务器会把自己的公钥发送给用户；
　　（2） 用户会根据服务器发来的公钥对密码进行加密；
　　（3） 加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功。
 
2. 基于密钥的登录方式
说明：
　　（1） 首先在客户端生成一对密钥（ssh-keygen）；
　　（2） 并将客户端的公钥ssh-copy-id 拷贝到服务端；
　　（3） 当客户端再次发送一个连接请求，包括ip、用户名；
　　（4） 服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如：qwer；
　　（5） 服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端；
　　（6） 得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端；
　　（7） 服务端接受到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录。

3. 数字签名技术
   是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。
   数字签名是个加密的过程，数字签名验证是个解密的过程。

   HTTPS协议是由SSL（Secure Sockets Layer）协议+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。



